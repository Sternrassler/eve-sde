name: PR Dependency Check

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read
  issues: read

jobs:
  dependency-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate PR + closing issues for unresolved dependencies
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = pr.body || '';
            const { extractDependencyIdsFromText } = require('./scripts/github/dependency-cycles.js');

            const collectDependenciesFromText = (text) => extractDependencyIdsFromText(text);

            // 1. Direkt im PR Body deklarierte Dependencies
            let depIds = collectDependenciesFromText(body);

            // 2. Closing Keywords identifizieren (Issues, die dieser PR schließen würde)
            const closingKeywords = ["close","closes","closed","fix","fixes","fixed","resolve","resolves","resolved"];
            const closingIssueIds = new Set();
            for (const kw of closingKeywords) {
              const re = new RegExp(`${kw} #([0-9]+)`, 'gi');
              for (const m of body.matchAll(re) || []) {
                closingIssueIds.add(parseInt(m[1]));
              }
            }

            // 3. Für jedes Closing Issue dessen Body abrufen und dortige Dependencies hinzufügen
            for (const issueId of closingIssueIds) {
              try {
                const { data } = await github.rest.issues.get({ owner, repo, issue_number: issueId });
                const issueDeps = collectDependenciesFromText(data.body || '');
                issueDeps.forEach(id => depIds.add(id));
              } catch (e) {
                core.warning(`Konnte Issue #${issueId} nicht laden: ${e.message}`);
              }
            }

            if (!depIds.size) {
              core.info('Keine Dependencies im PR Body oder verknüpften Issues.');
              return;
            }

            // 4. Prüfen ob Dependencies geschlossen sind
            const openDeps = [];
            for (const id of Array.from(depIds).sort((a,b)=>a-b)) {
              try {
                const { data } = await github.rest.issues.get({ owner, repo, issue_number: id });
                if (data.state !== 'closed') {
                  openDeps.push(`#${id} (${data.title})`);
                }
              } catch (e) {
                core.warning(`Fetch Fehler #${id}: ${e.message}`);
              }
            }

            if (openDeps.length) {
              core.setFailed('Blockierende Issues offen: ' + openDeps.join(', '));
            } else {
              core.info('Alle Dependencies geschlossen.');
            }
