name: Workflow Run Cleanup

# Hinweis: Dieser Workflow entfernt alte completed Runs (behält die neuesten 10 repository-weit)

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch: {}

permissions:
  actions: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old workflow runs (keep latest 10 overall)
        uses: actions/github-script@v8
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function listAllWorkflows() {
              const res = await github.rest.actions.listRepoWorkflows({ owner, repo, per_page: 100 });
              return res.data.workflows || [];
            }

            async function listRunsForWorkflow(workflow_id) {
              const all = [];
              let page = 1;
              while (true) {
                const { data } = await github.rest.actions.listWorkflowRuns({ owner, repo, workflow_id, per_page: 100, page });
                if (!data.workflow_runs || data.workflow_runs.length === 0) break;
                all.push(...data.workflow_runs);
                page++;
              }
              return all;
            }

            const workflows = await listAllWorkflows();
            if (!workflows.length) {
              core.info('Keine Workflows gefunden.');
              return;
            }

            // Sammle ALLE Runs aller Workflows
            let allRuns = [];
            for (const wf of workflows) {
              try {
                const runs = await listRunsForWorkflow(wf.id);
                // Füge Workflow-Name für bessere Nachverfolgung hinzu
                runs.forEach(run => {
                  run.workflow_name = wf.name;
                });
                allRuns.push(...runs);
                core.info(`Workflow ${wf.name}: ${runs.length} Run(s) gesammelt`);
              } catch (e) {
                core.warning(`Fehler beim Sammeln von Runs für Workflow ${wf.name}: ${e.message}`);
              }
            }

            if (!allRuns.length) {
              core.info('Keine Workflow-Runs gefunden.');
              return;
            }

            // Nur completed Runs betrachten (laufende nicht löschen)
            const completedRuns = allRuns.filter(r => r.status === 'completed');
            core.info(`Gesamt: ${allRuns.length} Runs, davon ${completedRuns.length} completed`);

            if (completedRuns.length <= 10) {
              core.info(`Nur ${completedRuns.length} completed Runs vorhanden -> nichts zu löschen.`);
              core.summary.addHeading('Workflow Run Cleanup');
              core.summary.addRaw(`Gelöschte Runs: 0 (nur ${completedRuns.length} completed Runs vorhanden)`);
              await core.summary.write();
              return;
            }

            // Repository-weit nach created_at sortieren (neueste zuerst)
            completedRuns.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            // Die 10 neuesten behalten, den Rest löschen
            const toKeep = completedRuns.slice(0, 10);
            const toDelete = completedRuns.slice(10);

            core.info(`Behalte die neuesten 10 Runs, lösche ${toDelete.length} ältere Runs`);

            let totalDeleted = 0;
            for (const run of toDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
                totalDeleted++;
                core.info(`Deleted run ${run.id} (${run.workflow_name}) created_at=${run.created_at}`);
              } catch (e) {
                core.warning(`Löschen von Run ${run.id} fehlgeschlagen: ${e.message}`);
              }
            }

            core.summary.addHeading('Workflow Run Cleanup');
            core.summary.addRaw(`Gelöschte Runs: ${totalDeleted} von ${toDelete.length}`);
            core.summary.addRaw(`\nBehaltene Runs: ${toKeep.length}`);
            await core.summary.write();
